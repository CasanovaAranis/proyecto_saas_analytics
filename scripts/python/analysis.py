# -*- coding: utf-8 -*-
"""analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15qJ37KP71CE5DoJvOQj-VB_BZt5HrfLN
"""

# Importamos las bibliotecas necesarias
import pandas as pd  # Para manipulación de datos
import numpy as np   # Para cálculos numéricos
import seaborn as sns  # Para visualizaciones
import matplotlib.pyplot as plt  # Para personalizar gráficos
import plotly.express as px  # Para gráficos interactivos

# Configuración de visualización
plt.style.use('seaborn-v0_8')  # Estilo más moderno
pd.set_option('display.float_format', lambda x: '%.2f' % x)  # Formato de decimales

# Cargamos el dataset
df = pd.read_csv('Datos_procesados.csv')

def crear_visualizaciones_iniciales(df):
    """
    Función para crear visualizaciones exploratorias básicas

    Parámetros:
    df: DataFrame limpio
    """
    # 1. Tendencia de Ingresos por Empresa
    fig_revenue = px.line(df,
                         x='date',
                         y='revenue',
                         color='company',
                         title='Tendencia de Ingresos por Empresa')
    fig_revenue.show()

    # 2. Distribución de Métricas Clave
    metricas_clave = ['customer_acquisition_cost',
                      'customer_lifetime_value',
                      'churn_rate',
                      'customer_satisfaction']

    fig = plt.figure(figsize=(15, 10))
    for i, metrica in enumerate(metricas_clave, 1):
        plt.subplot(2, 2, i)
        sns.boxplot(data=df, x='company', y=metrica)
        plt.xticks(rotation=45)
        plt.title(f'Distribución de {metrica}')
    plt.tight_layout()
    plt.show()

    # 3. Matriz de Correlación
    corr_matrix = df.select_dtypes(include=[np.number]).corr() * 100
    plt.figure(figsize=(30, 22))
    sns.heatmap(corr_matrix,
                annot=True,
                fmt=".1f",  # Muestra números con un decimal
                cmap='coolwarm',
                center=0,
                annot_kws={"size": 10})
    # Agregar el símbolo de porcentaje manualmente a las anotaciones
    for text in plt.gca().texts:
        text.set_text(f"{text.get_text()}%")
    plt.title('Matriz de Correlación de Métricas')
    plt.show()

# Creamos las visualizaciones
crear_visualizaciones_iniciales(df)